#!/usr/bin/env bash

config() { #{{{
   printf '\e[33m%s...' "applying configs"
   bspc monitor -d 1 2 3 4 5 6 7 8 9 10

	#oneborder(){
	#	border=1
	#	bspc config window_gap -$border
	#	bspc config border_width $border
	#	for side in top bottom left right; do
	#		bspc config ${side}_padding $border
	#	done
	#	bspc config bottom_padding 21
	#}

   bspc config focused_border_color    "${color3}"
   bspc config presel_feedback_color   "${color3}"
	((color0)) && { bspc config normal_border_color     "#$((${color0#\#}+202020))"; } || bspc config normal_border_color "${color0}"

   bspc config border_width            1
	bspc config window_gap					5
   bspc config gapless_monocle         true

   bspc config bottom_padding          0
   bspc config top_padding             0

   bspc config center_pseudo_tiled     true
   bspc config split_ratio             0.60

   bspc config automatic_scheme	       spiral
   bspc config initial_polarity	       first_child

	#oneborder

printf '\e[36m %s\n' "done."; }

#}}}
autogap_settings() { #{{{
   # gaps
      export GAPS=1  # enable or disable automatic gaps
      export G0=5    # minimum gap size
      export GS=7    # gaps size integer
      export GN=3    # number of windows

   # left and right padding
      export PADD=1  # enable or disable automatic padding
      export PS=5    # padding size integer
      export PN=2    # number of windows
}

#}}}

rules() { #{{{
   printf '\n\e[33m%s...' "setting rules"
   bspc rule -r "*"

   bspc config external_rules_command "$(which external_rules)"

   bspc rule -a Zathura state=tiled
   bspc rule -a float sticky=off state=floating 
   bspc rule -a gass sticky=on state=floating focus=off border=on
   bspc rule -a files layer=above locked=on sticky=on state=floating hidden=on
   bspc rule -a scratchterm layer=above locked=on sticky=on state=floating hidden=on
   bspc rule -a scratchmath layer=above locked=on sticky=on state=floating hidden=on

   printf '\e[36m %s\n\n' "done."
}

#}}}
apps() { #{{{
   _restart(){ ukill -n "$1" 1>/dev/null || return 1
   "$1" "${o[@]}" &>/dev/null & disown &&
   printf '\e[33m%s: %s\n' "$1" "restarted"; }
   _start(){ "$1" "${o[@]}" &>/dev/null & disown || return 1
   printf '\e[37m%s: %s\n' "$1" "started"; }

	#apps=(autogap dunstbar dunst acpid_events)
	#apps=(dunst acpid_events)

   for app in "${apps[@]}"
   do app_is_running="$(ps ax | sed -n "/nvim/d;/sed/d;/\<$app\>/p")"
   if [[ "$app_is_running" ]]
   then _restart $app || printf '\e[31m%s: %s\n' "$app" "restart failed"
   else _start $app || printf '\e[31m%s: %s\n' "$app" "failed"
   fi; done
}
#}}}

link_wal(){ #{{{
   printf '\e[33m\n%s...' "linking files"
   ln -sf "$HOME/.cache/wal/dunstrc" "$HOME/.config/dunst/dunstrc" &
   ln -sf "$HOME/.cache/wal/zathurarc" "$HOME/.config/zathura/zathurarc" &
   printf '\e[36m %s\n' "done"

   printf '\e[33m%s...' "creating style"
   qute="$HOME/.config/qutebrowser"
   sassc "$qute/style.scss" > "$qute/style.css"
   printf '\e[36m %s\n' "done"

   printf '\e[33m%s...' "applying colors"
   sed 's/{color4}/'$color4'/p;s/{color2}/'$color2'/g;s/{color0}/'$color0'/g'\
      $HOME/.config/wal/qute >\
      $HOME/.config/qutebrowser/config.py
   printf '\e[36m %s\n' "done"

   [[ -z $(pgrep -x qutebrowser) ]] && return
   printf '\e[33m%s...' "reloading qutebrowser"
   qutebrowser :config-source &>/dev/null
   printf '\e[36m %s\n\n' "done"
}
#}}}

make_fifo(){ #{{{
for fifo in $GAPFIFO $BARFIFO $PANELFIFO; do
   [[ -e "$fifo" ]] && rm "$fifo"
   mkfifo "$fifo"
   bspc subscribe node_add node_remove desktop_focus > $fifo &
   printf '%s\n' "mkfifo: \"$fifo\""
done
}

#}}}

main(){ #{{{

	xmodmap -e "keysym Menu = Super_R"
   source "$HOME/.cache/wal/colors.sh"
	case $1 in 1|0) reason="$1"; shift; esac

   [[ "$1" ]] && {
      case "$1" in
         rules) rules ;;
         config) config ;;
         qute) link_wal ;;
         apps) apps ;;
      esac || exit 1
      exit 0
   }

   # bspwm settings
      config
      rules

   # external settings
      #autogap_settings
      link_wal

   # start/restart apps
      make_fifo
      apps
}

#}}}

#{{{ INIT
main "$@" &&
{
   printf '\e[m\n%s\n' "..all done";
   dunstify "bspwmrc reloaded" -t 2000 -r 90211 &
   #echo > $GAPFIFO
}
# }}} vim: fdm=marker
