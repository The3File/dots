#!/usr/bin/env bash

#   _   _          ____                   __ _
#  | | | |        |___ \                 / _(_)
#  | |_| |__   ___  __) | ___ ___  _ __ | |_ _  __ _
#  | __| '_ \ / _ \|__ < / __/ _ \| '_ \|  _| |/ _` |
#  | |_| | | |  __/___) | (_| (_) | | | | | | | (_| |
#   \__|_| |_|\___|____/ \___\___/|_| |_|_| |_|\__, |
#                                               __/ |
#                                              |___/

config() {

      printf '\e[33m%s...' "applying configs"

   # -- BSPWM -- #

      bspc config focused_border_color	"$color4"
      bspc config presel_feedback_color "$color4"
      bspc config normal_border_color	"$color1"
      bspc config border_width		2
      bspc config gapless_monocle	true

      for side in top bottom left right;do
         bspc config ${side}_padding 0
      done

      bspc config center_pseudo_tiled 	true
      bspc config split_ratio		0.60

      bspc config initial_polarity	first_child
      bspc config automatic_scheme	spiral

      bspc monitor -d 1 2 3 4 5 6 7 8 9 10


   # -- autogap -- #

   # borders
      #export BO=3

   # gaps
      export GS=7	# gaps size integer
      export GN=4	# number of windows before $G0 gaps

   # left and right padding
      export PS=7	# padding size integer
      export PN=2	# number of windows before zero padding

   printf '\e[36m %s\n' "done."
}


apps() {

   for a in autogap dunstbar dunst acpid_events; do
   case $a in dunstbar) o=(--boot);; *) o=(); esac

      if [[ $(ps ax | sed -n "/sed/d;/\<$a\>/p") ]]; then
	 ukill "$a" 1>/dev/null && {
	    "$a" "${o[@]}" &>/dev/null & disown
	    printf '\e[33m%s: %s\n' "$a" "restarted"
	 } || printf '\e[31m%s: %s %s\n' "$a" "ukill" "failed"
      else
	 "$a" "${o[@]}" &>/dev/null & disown &&
	 printf '\e[37m%s: %s\n' "$a" "started" ||
	 printf '\e[31m%s: %s %s\n' "$a" "failed"
      fi

   done

}

rules() {

   printf '\n\e[33m%s...' "setting rules"

   bspc rule -r "*"

   bspc config external_rules_command "$(which external_rules)"

   bspc rule -a Zathura state=tiled
   bspc rule -a float sticky=off state=floating 

   bspc rule -a gass sticky=on state=floating focus=off border=on
   bspc rule -a files layer=above locked=on sticky=on state=floating hidden=on

   bspc rule -a scratchterm layer=above locked=on sticky=on state=floating hidden=on
   bspc rule -a scratchmath layer=above locked=on sticky=on state=floating hidden=on

   printf '\e[36m %s\n\n' "done."

}


qute() {

   printf '\e[33m\n%s...' "linking files"
   ln -sf "$HOME/.cache/wal/dunstrc" "$HOME/.config/dunst/dunstrc" &
   ln -sf "$HOME/.cache/wal/zathurarc" "$HOME/.config/zathura/zathurarc" &
   printf '\e[36m %s\n' "done"

   printf '\e[33m%s...' "creating style"
   qute="$HOME/.config/qutebrowser"
   sassc "$qute/style.scss" > "$qute/style.css"
   printf '\e[36m %s\n' "done"

   printf '\e[33m%s...' "applying colors"
   sed 's/{color4}/'$color4'/p;s/{color2}/'$color2'/g;s/{color0}/'$color0'/g'\
      $HOME/.config/wal/qute >\
      $HOME/.config/qutebrowser/config.py
   printf '\e[36m %s\n' "done"

   printf '\e[33m%s...' "reloading qutebrowser"
   [[ ! -z $(pgrep -x qutebrowser) ]] && qutebrowser :config-source &>/dev/null
   printf '\e[36m %s\n\n' "done"

}


main() {
   xmodmap -e "keycode 135 = Super_R"
   source "$HOME/.cache/wal/colors.sh"

   [[ $@ ]] &&
   case "$@" in
      rules) rules ;;
      config) config ;;
      qute) qute ;;
      apps) apps ;;
   esac && exit 0

   # -- BSP SUBSCRIBE -- #
   printf '%s' "mkfifo $fifo"
   for fifo in $GAPFIFO $BARFIFO; do
      [[ -e "$fifo" ]] && rm "$fifo"; mkfifo "$fifo"
      bspc subscribe node_add node_remove desktop_focus > $fifo &
      printf '%s' " \"$fifo\""
   done
   # ------------------- #

   rules; config; qute; apps

}

case $1 in 1|0) reason="$1"; shift; echo yes; esac

main "$@" &&
   {
      printf '\e[m\n%s\n' "..all done";
      dunstify "bspwmrc reloaded" -t 2000 -r 90211 &
   }
