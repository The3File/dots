set cleaner ~/.config/lf/cleaner
set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set previewer ~/.bin/preview
#set previewer ~/.config/lf/preview
#set cleaner ~/.config/lf/cleaner
#set preview!
set preview
set ratios '1:5555:9999'
#set ratios '1:2:5'
set relativenumber
set drawbox false
set icons true



#### BINDINGS ####


map . set hidden!
map zr set reverse!
map zn set info
map zs set info size
map zt set info time
map za set info size:time
map sn :set sortby natural; set info
map ss :set sortby size; set info size
map st :set sortby time; set info time
map sa :set sortby atime; set info atime
map sc :set sortby ctime; set info ctime
map se :set sortby ext; set info
map c :clear; unselect
map <space> :toggle; down
map r $bulkrename "$fx"

map S $$SHELL

# trash management
map D trash $fx
map tc trash-clear
map t ;
map tr !trash-restore

map B new-script

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
cmd preview_full_screen ${{
	clear
	IFS=' ' read -r h w < <(stty size)
	preview "$f" '' '' "$w"
	read -rsn1
}}
map i preview_full_screen
map o &xdg-open $f
map O $xdg-open --ask $f

# use enter for shell commands
map <enter> shell

#	GOTO
map gS cd ~/.Scripts
map gb cd ~/.bin
map g/ cd /
map ga cd ~/.apps
map gh cd ~/Downloads
map gH cd ~/
map gb cd ~/.bin
map gB cd ~/Documents/bible
map gs cd ~/Documents/Arbejde/HF
map gS cd ~/.Scripts
map gp cd ~/Projekter
map gd cd ~/.dotfiles
map gD cd ~/Documents
map gc cd ~/.config
map gl cd ~/.local
map gw cd ~/Pictures/wallpapers
map gt cd $trash
map gy cd ~/Movies/youtube

##################

cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
		  video/*) mpv $fx;;
        *) for f in $fx; do setsid xdg-open $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

cmd trash ${{
	printf '\e[0H\e[J\e[0;33m%s\n\e[1;34m%s\e[m' "${fx[@]}" "delete? [y/n]: "

   read -rsn1
   [[ $REPLY == "y" ]] || exit 0

	read -rsn1 -p "sure? [Y/n] "
	[[ ${REPLY,,} == "n" ]] && exit 0

	trash ${fx[@]}; printf "deleted"
}}

cmd trash-clear %{{
   printf "clear trash? [y/n]: "
   read -rsn1 a
   [[ $a = "y" ]] && {
      trash-empty
      printf "cleared trash"
   }
}}

cmd new-script ${{
   printf '\e[0;33m\e[H\e[J%s\n\e[1;34m%s\e[m' "new bash script" "name: "; read a
   [[ "$a" ]] && {
      [[ ! -f "$a" ]] && { 
	 		printf "#!/usr/bin/env bash\n\n\n" > "$a"
			chmod a+x "$a"
      }
   nvim +startinsert +$ "$a"
   }
}}


map bf !chwal -f $fx
map bw change_wal
map bg $feh --bg-fill $f

cmd change_wal %{{
	[[ -f "$fx" ]] || { printf "wal: $fx: not a picture"; exit; }
	printf '\r%s' "backend: [c]olorthief color[z] [h]aishoku [w]al "
	read -rsn1 backend
	case $backend in
		c) backend="colorthief" ;;
		w) backend="wal" ;;
		z) backend="colorz" ;;
		h) backend="haishoku" ;;
		*) exit
	esac
	wal --backend $backend -i "$fx"
	. ~/.config/bspwm/bspwmrc config
	esac
}}

cmd new-text %[[ "$a" ]] && { reset_terminal; nvim "$a"; }

cmd extract $extract

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
#  vim: ft=config
