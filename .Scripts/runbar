#!/usr/bin/env bash

ws() {
	s=($(xprop -root _NET_DESKTOP_NAMES | awk '{$1=$2=""; print $0}' | sed -e 's/,//g' -e 's/\"//g' -e 's/^[[:space:]]*//'))
	c=$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $3}')
	for ((i=0;i<${#s[*]};i++)){ [[ "$i" = "$c" ]] && s[$i]="%{F#0c0}[${s[$i]}]%{B-}%{F-}" || s[$i]="${s[$i]}"; }
	export W="$(sed -e 's/\(}\).?\(%\)/\1\2/' <<< "${s[*]}")"
}

net(){
	[[ $1 = show ]] && alacritty\
		-o "window.position: {x: 800, y: 410}" -o "window.dimensions: {columns: 70, lines: 21}"\
		--class float -e bash -c "iw wlan0 link; ip a s wlan0; read -rsn1" && return

	net="%{F#f00}no connection%{F-}"

	read -ra st < <(iw wlan0 link | grep SSID)
	[[ ! -z "$st" ]] && {
		read -ra ip < <(ip a s wlan0 | grep 'inet ')
		read -ra sn < <(iw wlan0 link | grep 'signal')
		sn="${sn##*:}"
		((sn>=-20)) && color="%{F#f30}"
		((sn<=-20)) && color="%{F#890}"
		((sn<=-40)) && color="%{F#4a0}"
		((sn<=-55)) && color="%{F#0c0}"
		((sn<=-60)) && color="%{F#0c0}"
		net="${st[1],,} ${color}${sn[1]} ${sn[2]}%{F-} [${ip[1]}]"
	}
	export N="%{A:net show:}$net%{A}"
}

bat(){
	acpi=$(acpi | awk -F', ' 'gsub("Battery 0: ","") {print $1" "$2}')
	: "${acpi##*\ }"; per="${_%%%}"
	stat="${acpi%%\ *}"
	get_color $per
	export B="${stat,,} ${color}${per}%%%{F-}"
}

volume(){
	volume="$(pamixer --get-volume)"
	mute="$(pamixer --get-mute)"
	[[ $mute = true ]] && { v="(${volume}%)"; volume="0";} || v="${volume}%%"
	get_color $volume
	export V="volume ${color}${v}%{F-}"
}

light(){
	IFS='.' read -r light _ < <(xbacklight -get)
	get_color $light
	export L="brightness ${color}${light}%%%{F-}"
}

keylock(){
	read -r K < "$HOME/.keylock"
	[[ $K = enable ]] && color="%{F#0c0}" || color="%{F#c00}"
	export K="keyboard ${color}${K}d%{F-}"
}

misc(){
	export D="$(date '+%a %d %b %H%M')"
	set $(df -h | grep "/$"); export R="/ $4"
	set $(df -h | grep "/home$"); export H="~ $4"
}

get_color(){
	(($1>=${2:-75})) && color="%{F#0c0}"
	(($1<=${3:-75})) && color="%{F#4a0}"
	(($1<=${4:-50})) && color="%{F#890}"
	(($1<=${5:-25})) && color="%{F#f30}"
	(($1<=${6:-10})) && color="%{F#f00}"
}

update_all(){ ws; net; volume; light; bat; misc; keylock; }

print_bar(){ lemonbar -p -n lemonbar -g 1366x20 -${lp} -B "$color0" -F "$color7" -u 2 -f "ypn envypn:size=10"; }

parse(){ printf '%s\n' " $W | $K %{r} $H | $R | $V | $L | $N | $B | $D "; }

main(){
	while :; do echo > $PANELFIFO; sleep 10; done &

		exec 3<>$PANELFIFO
		while read -u 3 line <& 3; do
			case $line in
				ws) ws ;;
				net) net ;;
				vol) volume ;;
				light) light ;;
				key) keylock ;;
				*) net; bat; misc ;;
			esac
			parse
		done < "$PANELFIFO" | print_bar | while read; do eval $REPLY

	done &
	exec 3<&-
}

trap 'killall lemonbar; bspc config bottom_padding 0; bspc config top_padding 0' EXIT TERM KILL

[[ -e "$PANELFIFO" ]] && rm "$PANELFIFO"
mkfifo "$PANELFIFO"

# lemonbar_position
lp="b"
#bspc config top_padding          21
#bspc config bottom_padding          21
bspc rule -a lemonbar layer=below
source "$HOME/.cache/wal/colors.sh"

update_all
main

xdo above -t "$(xdo id -N Bspwm -n root)" "$(xdo id -m -a lemonbar)"
wait
