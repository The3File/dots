#!/usr/bin/env bash

get_config(){
	bspc rule -a lemonbar layer=below
	
	# lemonbar_position: b for bottom, t for top
	lp="b"

	# colors
	source "$HOME/.cache/wal/colors.sh"
	bg="$color0"
	fg="$color7"
}

parse_all_out(){
	printf '%s\n' "$W | $K %{r} $H | $R | $V | $L | $N | $B | $D "
}

print_bar(){
	lemonbar -p -n lemonbar\
		-g 1920x26\
		-${lp}\
		-B "#a5${bg#\#}"\
		-F "$fg"\
		-u 2\
		-f "-xos4-terminus-medium-*-*-*-14-*-*-*-*-*-*-*"
}

ws() {
	set $(xprop -root _NET_CURRENT_DESKTOP)
	current_space="$3"
	spaces=(1 2 3 4 5 6 7 8 9 10)

	for ((i=1;i<=10;i++));{
			if ((i==current_space+1)); then
				spaces[$((i-1))]="%{F#0f0}[$i]%{B-}%{F-}"
			elif ((i==current_space+2))||((i==10)); then
				spaces[$((i-1))]="$i"
			elif ((i>10)); then
				spaces[$((i-1))i]=" $i"
			fi
	}

	export W="${spaces[@]}"
}

net(){
	get_net_ip
	get_net_link
	get_net_signal

	[[ $ssid ]] && parse_net_out || net="%{F#f00}no connection%{F-}"

	export N="%{A:net_show:}$net%{A}"
}

parse_net_out(){
	get_color "$signal" "-20" "-40" "-55" "-60"
	net="${ssid[1],,} ${color}${signal[1]} ${signal[2]}%{F-} [${ip[1]}]"
}

get_net_ip(){
	read -ra ip < <(ip a s wlp3s0 | grep 'inet ')
}

get_net_link(){
	read -ra ssid < <(iw wlp3s0 link | grep SSID)
}

get_net_signal(){
	read -ra signal < <(iw wlp3s0 link | grep 'signal')
	signal="${signal##*:}"
}

net_show(){
	alacritty\
		-o "window.position: {x: 1100, y: 500}" -o "window.dimensions: {columns: 70, lines: 24}"\
		--class float -e bash -c "iw wlp3s0 link; ip a s wlp3s0; read -rsn1"
}

bat(){
	acpi=$(acpi | awk -F', ' 'gsub("Battery 0: ","") {print $1" "$2}')
	: "${acpi##*\ }"; per="${_%%%}"
	stat="${acpi%%\ *}"
	get_color $per
	export B="${stat,,} ${color}${per}%%%{F-}"
}

volume(){
	volume="$(pamixer --get-volume)"
	mute="$(pamixer --get-mute)"
	[[ $mute = true ]] && { v="(${volume}%)"; volume="0";} || v="${volume}%%"
	get_color $volume
	[[ volume -gt 100 ]] && color="%{F#F00}"
	export V="volume ${color}${v}%{F-}"
}

light(){
	read -r light_file < "/sys/class/backlight/amdgpu_bl0/brightness"
	light="$((light_file*100/255))"
	get_color $light
	export L="brightness ${color}${light}%%%{F-}"
}

keylock(){
	read -r K < "$HOME/.keylock"

	[[ $K = enable ]] && color="%{F#0c0}" || color="%{F#c00}"

	export K="keyboard ${color}${K}d%{F-}"
}

misc(){
	export D="$(date '+%a %d %b %H%M')"

	set $(df -h | grep "/$")
	export R="/ $4"

	set $(df -h | grep "/home$")
	export H="~ $4"
}

get_color(){
   [[ $1 -gt ${2:-75} ]] && color="%{F#0c0}"
   [[ $1 -le ${2:-75} ]] && color="%{F#5b0}"
   [[ $1 -le ${3:-50} ]] && color="%{F#b90}"
   [[ $1 -le ${4:-35} ]] && color="%{F#c60}"
   [[ $1 -le ${5:-15} ]] && color="%{F#f00}"
}

start_while_loop(){
	start_timed_update
	start_read_fifo
}

start_timed_update(){
	while :; do
		echo > $PANELFIFO
		sleep 10
	done &
}

start_read_fifo(){
	while read -u 3 line <& 3; do
		case $line in
			ws) ws ;;
			net) net ;;
			vol) volume ;;
			light) light ;;
			key) keylock ;;
			*) net; bat; misc ;;
		esac
		parse_all_out
	done < "$PANELFIFO" | print_bar | while read; do eval $REPLY; done &
	exec 3<&-
}

update_all(){ ws; net; light; bat; misc; keylock; volume; }

mk_fifo(){
	[[ -e "$PANELFIFO" ]] && rm "$PANELFIFO"
	mkfifo "$PANELFIFO"
	exec 3<>$PANELFIFO
}

main(){
	trap 'killall lemonbar; bspc config bottom_padding 0; bspc config top_padding 0' EXIT TERM KILL
	
	mk_fifo
	get_config
	update_all
	start_while_loop

	xdo above -t "$(xdo id -N Bspwm -n root)" "$(xdo id -m -a lemonbar)" & wait
}

main
