#!/usr/bin/env bash

fz(){ fzf --ansi --height 40% --reverse "$@";}

editor(){ nvim +"set ft=markdown" "$@";}

mv_(){
	[[ $2 =~ / ]] && mkdir -p ${2%/*}
	mv -vi "$1" "$2"
}

edit(){
	select_note edit
	editor "$note"
}

delete(){
	select_note delete
	read -rp "delete "$note"? [y/N] " r
	[[ $r =~ y|Y ]] && rm "$note"
}

move(){
	select_note move
	read -rep "new name: " new_name
	mv_ "$note" "${new_name}.md"
}

show(){
	printf '\e[1m%s\n\e[m%s\n'\
		"entering subshell..." "ctrl+d to return"
	exec $SHELL
}

new(){
	prep_tmp
	i=1; until get_new_name || [[ $i -ge 2 ]]; do
		editor +startinsert $tmp && ((i++))
	done
	check_file_changed && mv_tmp || rm $tmp
}

get_new_name(){
	read -rep "new name: " new_name
	[[ $new_name ]] || return 1
}

prep_tmp(){
	tmp="$(mktemp)"
	print_tags > $tmp
	first_modify="$(stat -c %Y $tmp)"
}

check_file_changed(){
	current_modify="$(stat -c "%Y" $tmp)"
	((first_modify<current_modify)) || return 1
}

mv_tmp(){
	fallback="note_$(date '+%d-%m_%H%M')"
	mv_ "$tmp" "${new_name:-$fallback}.md"
}

sync(){
	status=$(git status --porcelain)
	[[ -z "$status" ]] && pull || push
}

push(){
	git add .; git commit -m "$status"
	git push -u origin master
}

pull(){
	printf '%s\n' "No changes, checking remote.."
	git pull
}

print_tags(){
	printf '\n\n%s\n%s' "[//]: # ($(date -Iseconds))"\
		"[//]: # (tags: [<++>])"
}

print_notes(){
	IFS=$'\n' read -rd '' -a notes < <(
		fd -c always .md $NOTES
	)
	printf '%s\n' "${notes[@]#*${NOTES##*/}/}"
}

print_opts(){
	opts=("new" "sync" "edit" "delete" "move" "show")
	printf '%s\n' "${opts[@]}"
}

select_note(){
	note="$(print_notes | fz --prompt="$1 > " -q "$q")"
	[[ -z "$note" ]] && exit 0
}

get_opts(){
	q="$2"
	opt=$(print_opts | fz -0 -1 -q "$1")
	[[ $opt ]] || exit
}

main(){
	[[ "$NOTES" ]] && cd "$NOTES" || exit
	get_opts "$@"
	eval "$opt"
}

main "$@"
